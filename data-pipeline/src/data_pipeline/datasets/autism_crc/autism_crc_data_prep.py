import hail as hl

from gnomad_qc.generic_grch37.sample_qc.apply_hard_filters import annotate_sex, make_hard_filters_expr, make_perm_filters_expr

## load_data/import_vcf.py

def vcf_to_mt(path):
    mt = hl.import_vcf(
        path,
        force_bgz=True,
        call_fields=["GT", "PGT"],
    )

    mt = mt.key_rows_by(**hl.min_rep(mt.locus, mt.alleles))

    return mt

## load_data/import_resources.py - just a bunch of overwriting
## load_data/load_coverage.py - use file generated by other pipeline?
## import_gnomad_sv.py - no structural variant analysis for autism_crc data

## sample_qc/apply_hard_fileters.py
def apply_hard_filters(path):
    mt = vcf_to_mt(path)
    mt = mt.filter_rows(
        (hl.len(mt.alleles) == 2)
        & hl.is_snp(mt.alleles[0], mt.alleles[1])
        & (hl.agg.mean(mt.GT.n_alt_alleles()) / 2 > 0.001)
        & (hl.agg.fraction(hl.is_defined(mt.GT)) > 0.99)
    )
    qc_mt = mt.annotate_cols(callrate=hl.agg.fraction(hl.is_defined(mt.GT))).naive_coalesce(5000)
    # TODO: these lines require saving, then re-importing qc_mt
    #meta_ht = hl.import_table(qc_mt, impute=True, types={"age": hl.tfloat64}
    #    ).key_by("s")
    #qc_mt = qc_mt.annotate_cols(**meta_ht[qc_mt.s])

    qc_ht = annotate_sex(
        qc_mt,
        'annotate_sex_',
        male_threshold=0.8,
    ).cols()

    qc_ht = qc_ht.annotate(ambiguous_sex=hl.is_missing(qc_ht.is_female))

    sex_expr = (
        hl.case()
        .when(qc_ht.ambiguous_sex, "ambiguous_sex")
        .when(qc_ht.is_female, "female")
        .default("male")
    )
    qc_ht = qc_ht.annotate(
        hard_filters=make_hard_filters_expr(qc_ht, "genomes"),
        perm_filters=make_perm_filters_expr(qc_ht, "genomes"),
        sex=sex_expr,
        data_type=data_type,
    ).key_by("data_type", "s")
    
    colnames = ["pcr_free", "mean_dp", "perm_filters"]
    
    # rank_ht = qc_ht.filter(hl.len(qc_ht.hard_filters) == 0, keep=True).select(*colnames)
    # (
    #     rank_ht.annotate(releasable=(hl.len(rank_ht.perm_filters) == 0))
    #     .drop("perm_filters")
    # )
    return qc_ht #rank_ht
    
# annotations/
#     generate_qc_annotations.py

# load_data/
#     load_vqsr.py

# variant_qc/
#     random_forest.py
#     evaluation.py

# annotations/
#     generate_freq_data.py
#     generate_qc_annotaions.py

# creat_release
